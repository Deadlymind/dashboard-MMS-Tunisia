import Link from "next/link";
export const dynamic = "force-dynamic";

type SearchParams = Promise<Record<string, string | string[] | undefined>>;

function getOne(sp: Record<string, string | string[] | undefined>, key: string, def = "") {
  const v = sp[key];
  return Array.isArray(v) ? (v[0] ?? def) : (v ?? def);
}
function toInt(v: string | undefined, def: number) {
  const n = parseInt(v ?? "", 10);
  return Number.isFinite(n) && n > 0 ? n : def;
}
function personTypeLabel(v: string) {
  if (v === "PM") return "Personne Morale";
  if (v === "PP") return "Personne Physique";
  if (v === "AS") return "Association";
  return v || "-";
}
function statutLabel(v: string) {
  switch (v) {
    case "NOUVELLE CREATION": return "Nouvelle création";
    case "EXISTANTE NON EXERCANTE": return "Existante non exerçante";
    case "EXERCANTE": return "Exerçante";
    default: return v || "-";
  }
}
function withParams(base: string, params: Record<string, string | number | undefined>) {
  const url = new URL(base, "http://localhost");
  Object.entries(params).forEach(([k, v]) => {
    if (v === undefined || v === "") return;
    url.searchParams.set(k, String(v));
  });
  return url.pathname + (url.search ? url.search : "");
}

export default async function ClientsPage({ searchParams }: { searchParams: SearchParams }) {
  const sp = await searchParams;
  const q = getOne(sp, "q", "");
  const page = toInt(getOne(sp, "page"), 1);
  const pageSize = toInt(getOne(sp, "page_size"), 10);

  const api = new URL("http://127.0.0.1:8000/api/v1/exploitation/clients/");
  if (q) api.searchParams.set("q", q);
  api.searchParams.set("page", String(page));
  api.searchParams.set("page_size", String(pageSize));

  const res = await fetch(api, { cache: "no-store", headers: { Accept: "application/json" } });
  const data = await res.json();

  const isPaginated = data && typeof data === "object" && ("results" in data || "count" in data);
  const allItems: any[] = Array.isArray(data) ? data : (data.results ?? []);
  let items = allItems;
  let total = isPaginated ? (data.count ?? items.length) : items.length;

  // If backend returned full array (no pagination), slice here:
  if (!isPaginated) {
    const start = (page - 1) * pageSize;
    items = items.slice(start, start + pageSize);
  }

  const totalPages = Math.max(1, Math.ceil(total / pageSize));
  const current = Math.min(Math.max(1, page), totalPages);

  const prevHref = current > 1
    ? withParams("/exploitation/structure/clients", { q, page: current - 1, page_size: pageSize })
    : undefined;

  const nextHref = current < totalPages
    ? withParams("/exploitation/structure/clients", { q, page: current + 1, page_size: pageSize })
    : undefined;

  const pageSizeHref = (size: number) =>
    withParams("/exploitation/structure/clients", { q, page: 1, page_size: size });

  return (
    <section className="space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">Clients</h1>
        <div className="flex items-center gap-2">
          <form action="/exploitation/structure/clients" className="hidden md:block">
            <input
              type="text"
              name="q"
              defaultValue={q}
              placeholder="Rechercher…"
              className="rounded-lg border px-3 py-2 text-sm"
            />
            <input type="hidden" name="page_size" value={pageSize} />
          </form>
          <Link href="/exploitation/structure/clients/nouveau" className="btn btn-primary">
            Nouveau client
          </Link>
        </div>
      </div>

      <div className="card overflow-auto">
        <table className="table min-w-[800px]">
          <thead>
            <tr>
              <th>CODE</th>
              <th>RAISON SOCIALE</th>
              <th>TYPE</th>
              <th>FORME JURIDIQUE</th>
              <th>STATUT</th>
              <th>ACTION</th>
            </tr>
          </thead>
          <tbody>
            {items.map((c: any) => (
              <tr key={c.id} className="row">
                <td className="p-2">{c.code}</td>
                <td className="p-2">{c.raison_sociale}</td>
                <td className="p-2">{personTypeLabel(c.type_personne)}</td>
                <td className="p-2">{c.forme_juridique || "-"}</td>
                <td className="p-2">
                  <span className="badge">{statutLabel(c.statut)}</span>
                </td>
                <td className="p-2">
                  <Link href={`/exploitation/structure/clients/${c.id}/informations`} className="btn">
                    Fiche entreprise
                  </Link>
                </td>
              </tr>
            ))}
            {items.length === 0 && (
              <tr>
                <td className="p-4 text-sm text-gray-500" colSpan={6}>Aucun client.</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
        <div className="text-sm opacity-70">
          Page {current} / {totalPages} — {total} au total
        </div>
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2 text-sm">
            <span>Lignes par page:</span>
            <div className="flex gap-1">
              {[10, 20, 50, 100].map((n) => (
                <Link
                  key={n}
                  href={pageSizeHref(n)}
                  className={`rounded-lg border px-2 py-1 ${n===pageSize ? "bg-gray-100 font-medium" : "hover:bg-gray-50"}`}
                >
                  {n}
                </Link>
              ))}
            </div>
          </div>
          <div className="flex items-center gap-1">
            <Link
              aria-disabled={!prevHref}
              href={prevHref ?? "#"}
              className={`rounded-lg border px-3 py-1 text-sm ${prevHref ? "hover:bg-gray-50" : "pointer-events-none opacity-50"}`}
            >
              Précédent
            </Link>
            <Link
              aria-disabled={!nextHref}
              href={nextHref ?? "#"}
              className={`rounded-lg border px-3 py-1 text-sm ${nextHref ? "hover:bg-gray-50" : "pointer-events-none opacity-50"}`}
            >
              Suivant
            </Link>
          </div>
        </div>
      </div>
    </section>
  );
}
