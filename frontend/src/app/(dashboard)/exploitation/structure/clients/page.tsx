import Link from "next/link";

export const dynamic = "force-dynamic";

type SearchParams = Promise<Record<string, string | string[] | undefined>>;

// label maps
const PERSON_LABEL: Record<string, string> = {
  PP: "Personne Physique",
  PM: "Personne Morale",
  AS: "Association",
};

const STATUT_LABEL: Record<string, string> = {
  "NOUVELLE CREATION": "Nouvelle création",
  "EXISTANTE NON EXERCANTE": "Existante non exerçante",
  EXERCANTE: "Exerçante",
};

// optional: add color classes if you use daisyUI/tailwind badges
const STATUT_BADGE_CLASS: Record<string, string> = {
  "NOUVELLE CREATION": "badge-warning",
  "EXISTANTE NON EXERCANTE": "badge-ghost",
  EXERCANTE: "badge-success",
};

function humanType(v?: string) {
  return PERSON_LABEL[(v || "").toUpperCase()] ?? v ?? "-";
}

function humanStatut(v?: string) {
  const key = (v || "").toUpperCase().trim();
  return STATUT_LABEL[key] ?? v ?? "-";
}

function statutBadgeClass(v?: string) {
  const key = (v || "").toUpperCase().trim();
  const color = STATUT_BADGE_CLASS[key] ?? "";
  return `badge ${color}`.trim();
}

export default async function ClientsPage({
  searchParams,
}: {
  searchParams: SearchParams;
}) {
  const sp = await searchParams;
  const rawQ = sp?.q;
  const q = Array.isArray(rawQ) ? rawQ[0] : rawQ ?? "";
  const url = new URL("http://127.0.0.1:8000/api/v1/exploitation/clients/");
  if (q) url.searchParams.set("q", q);

  const res = await fetch(url, {
    cache: "no-store",
    headers: { Accept: "application/json" },
  });
  const data = await res.json();
  const clients = Array.isArray(data) ? data : data.results ?? [];

  return (
    <section className="space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">Clients</h1>
        <Link
          href="/exploitation/structure/clients/nouveau"
          className="btn btn-primary"
        >
          Nouveau client
        </Link>
      </div>

      <div className="card overflow-auto">
        <table className="table">
          <thead>
            <tr>
              <th>CODE</th>
              <th>RAISON SOCIALE</th>
              <th>TYPE</th>
              <th>FORME JURIDIQUE</th>
              <th>STATUT</th>
              <th>ACTION</th>
            </tr>
          </thead>
          <tbody>
            {clients.map((c: any) => (
              <tr key={c.id} className="row">
                <td className="p-2">{c.code}</td>
                <td className="p-2">{c.raison_sociale}</td>
                <td className="p-2">{humanType(c.type_personne)}</td>
                <td className="p-2">{c.forme_juridique || "-"}</td>
                <td className="p-2">
                  <span className={statutBadgeClass(c.statut)}>
                    {humanStatut(c.statut)}
                  </span>
                </td>
                <td className="p-2">
                  <Link
                    href={`/exploitation/structure/clients/${c.id}/informations`}
                    className="btn"
                  >
                    Fiche entreprise
                  </Link>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </section>
  );
}
