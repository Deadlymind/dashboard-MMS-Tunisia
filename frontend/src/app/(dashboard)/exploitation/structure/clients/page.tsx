import Link from "next/link";
import Pagination from "@/components/Pagination";
import ExportCsvButton from "@/components/ExportCsvButton";
import ImportCsvButton from "@/components/ImportCsvButton";

export const dynamic = "force-dynamic";
type SearchParams = Promise<Record<string, string | string[] | undefined>>;

function niceType(t?: string) {
  if (t === "PM") return "Personne Morale";
  if (t === "PP") return "Personne Physique";
  if (t === "AS") return "Association";
  return t || "-";
}
function niceStatut(s?: string) {
  if (s === "NOUVELLE CREATION") return "Nouvelle création";
  if (s === "EXISTANTE NON EXERCANTE") return "Existante non exerçante";
  if (s === "EXERCANTE") return "Exerçante";
  return s || "-";
}

export default async function ClientsPage({ searchParams }: { searchParams: SearchParams }) {
  const sp = await searchParams;

  const rawQ = sp?.q;
  const q = Array.isArray(rawQ) ? rawQ[0] : (rawQ ?? "");

  const rawPage = sp?.page;
  const page = Math.max(1, parseInt(Array.isArray(rawPage) ? rawPage[0] : (rawPage ?? "1")) || 1);

  const rawPageSize = sp?.page_size;
  const pageSize = Math.min(
    100,
    Math.max(1, parseInt(Array.isArray(rawPageSize) ? rawPageSize[0] : (rawPageSize ?? "10")) || 10)
  );

  const url = new URL("http://127.0.0.1:8000/api/v1/exploitation/clients/");
  url.searchParams.set("page", String(page));
  url.searchParams.set("page_size", String(pageSize));
  if (q) url.searchParams.set("q", q);

  const res = await fetch(url, { cache: "no-store", headers: { Accept: "application/json" } });
  let data: any = null;
  try {
    data = await res.json();
  } catch {
    data = [];
  }

  const clients = Array.isArray(data) ? data : (data.results ?? []);
  const total = typeof data?.count === "number" ? data.count : clients.length;

  // Build CSV export URL with current filters (no pagination so the export includes all matches)
  const exportUrl = new URL("http://127.0.0.1:8000/api/v1/exploitation/clients/export/");
  if (q) exportUrl.searchParams.set("q", q);

  return (
    <section className="space-y-4">
      <div className="flex items-center justify-between gap-2">
        <h1 className="text-2xl font-semibold">Clients</h1>
        <div className="flex items-center gap-2">
          <form className="flex items-center gap-2" action="/exploitation/structure/clients">
            <input
              type="text"
              name="q"
              defaultValue={q}
              placeholder="Rechercher…"
              className="input"
            />
            <input type="hidden" name="page_size" value={String(pageSize)} />
            <button className="btn" type="submit">Rechercher</button>
          </form>

          {/* Import / Export / New */}
          <ImportCsvButton defaultDuplicate="error" />
          <ExportCsvButton href={exportUrl.toString()} />
          <Link href="/exploitation/structure/clients/nouveau" className="btn btn-primary">
            Nouveau client
          </Link>
        </div>
      </div>

      <div className="card overflow-auto">
        <table className="table">
          <thead>
            <tr>
              <th>CODE</th>
              <th>RAISON SOCIALE</th>
              <th>TYPE</th>
              <th>FORME JURIDIQUE</th>
              <th>STATUT</th>
              <th>ACTION</th>
            </tr>
          </thead>
          <tbody>
            {clients.map((c: any) => (
              <tr key={c.id} className="row">
                <td className="p-2">{c.code}</td>
                <td className="p-2">{c.raison_sociale}</td>
                <td className="p-2">{niceType(c.type_personne)}</td>
                <td className="p-2">{c.forme_juridique || "-"}</td>
                <td className="p-2">
                  <span className="badge">{niceStatut(c.statut)}</span>
                </td>
                <td className="p-2">
                  <Link href={`/exploitation/structure/clients/${c.id}/informations`} className="btn">
                    Fiche entreprise
                  </Link>
                </td>
              </tr>
            ))}
            {clients.length === 0 && (
              <tr>
                <td className="p-2" colSpan={6}>Aucun résultat.</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <Pagination
        page={page}
        pageSize={pageSize}
        total={total}
        hrefBase="/exploitation/structure/clients"
        extraQuery={{ q }}
      />
    </section>
  );
}
