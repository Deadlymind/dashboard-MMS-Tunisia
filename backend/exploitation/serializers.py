from rest_framework import serializers
from .models import Client, ClientObjetSocial, SocialObject
import unicodedata

# ---------- Normalizers & mappings ----------
def _clean_token(v: str) -> str:
    if v is None:
        return ""
    # Convert any Unicode Z* space to normal space, strip, uppercase
    s = "".join(" " if unicodedata.category(ch).startswith("Z") else ch for ch in str(v))
    s = s.replace("\u00A0", " ").strip().upper()  # NBSP safety
    return s

STATUT_MAP = {
    "NC": "NOUVELLE CREATION",
    "NE": "NOUVELLE CREATION",
    "EXNEX": "EXISTANTE NON EXERCANTE",
    "ENX": "EXISTANTE NON EXERCANTE",
    "EX": "EXERCANTE",
}
FORME_MAP = {"SURAL": "SUARL"}

def norm_statut(v: str) -> str:
    s = _clean_token(v)
    return STATUT_MAP.get(s, s)

def norm_forme(v: str) -> str:
    s = _clean_token(v)
    return FORME_MAP.get(s, s)

def norm_person(v: str) -> str:
    return _clean_token(v)

# ---------- Serializers ----------
class ClientSerializer(serializers.ModelSerializer):
    # Override fields to bypass model 'choices' validation (we validate ourselves)
    code = serializers.CharField(required=False, allow_blank=True)
    statut = serializers.CharField(required=False, allow_blank=True)
    forme_juridique = serializers.CharField(required=False, allow_blank=True)
    type_personne = serializers.CharField(required=True, allow_blank=False)

    class Meta:
        model = Client
        fields = "__all__"
        extra_kwargs = {"code": {"required": False}}

    def validate(self, attrs):
        # Normalize incoming tokens
        if "statut" in attrs:
            attrs["statut"] = norm_statut(attrs["statut"])
        if "forme_juridique" in attrs:
            attrs["forme_juridique"] = norm_forme(attrs["forme_juridique"])
        if "type_personne" in attrs:
            attrs["type_personne"] = norm_person(attrs["type_personne"])

        # Allowed values (from model choices or sane defaults)
        statut_allowed = {c[0] for c in getattr(Client, "STATUT_CHOICES", [])} or {
            "NOUVELLE CREATION", "EXISTANTE NON EXERCANTE", "EXERCANTE"
        }
        forme_allowed = {c[0] for c in getattr(Client, "FORME_JURIDIQUE_CHOICES", [])} or {
            "SUARL", "SARL", "SA", "PP", "ASSOCIATION"
        }
        person_allowed = {c[0] for c in getattr(Client, "PERSON_TYPE_CHOICES", [])} if hasattr(Client, "PERSON_TYPE_CHOICES") else {
            "PP", "PM", "AS"
        }

        if attrs.get("statut") and attrs["statut"] not in statut_allowed:
            raise serializers.ValidationError({"statut": f"« {attrs['statut']} » n'est pas un choix valide."})
        if attrs.get("forme_juridique") and attrs["forme_juridique"] not in forme_allowed:
            raise serializers.ValidationError({"forme_juridique": f"« {attrs['forme_juridique']} » n'est pas un choix valide."})
        if attrs.get("type_personne") and attrs["type_personne"] not in person_allowed:
            raise serializers.ValidationError({"type_personne": f"« {attrs['type_personne']} » n'est pas un choix valide."})
        return attrs

    def create(self, validated_data):
        # Auto-generate CLxxxx if code missing
        if not validated_data.get("code"):
            last = Client.objects.order_by("-id").first()
            next_id = (last.id if last else 0) + 1
            validated_data["code"] = f"CL{next_id:04d}"
        return super().create(validated_data)

class ClientObjetSocialSerializer(serializers.ModelSerializer):
    class Meta:
        model = ClientObjetSocial
        fields = "__all__"
        read_only_fields = ("client",)

class SocialObjectSerializer(serializers.ModelSerializer):
    class Meta:
        model = SocialObject
        fields = "__all__"
