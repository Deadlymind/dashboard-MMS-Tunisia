# backend/exploitation/admin.py
from django.contrib import admin
from django.http import HttpResponse
from django.db import transaction, IntegrityError
import csv
import re

from .models import Client, SocialObject, ClientObjetSocial, Associe

# ---- Local helper to generate the next CL#### code (admin-side) ----
CODE_PREFIX = "CL"
CODE_WIDTH = 4  # -> CL0001 style

def _next_client_code():
    """
    Scan existing client codes and return next sequential CL####.
    Robust against gaps/deletions.
    """
    max_num = 0
    for c in Client.objects.values_list("code", flat=True):
        if not c:
            continue
        m = re.search(r"(\d+)$", str(c))
        if m:
            try:
                n = int(m.group(1))
            except ValueError:
                continue
            if n > max_num:
                max_num = n
    return f"{CODE_PREFIX}{(max_num + 1):0{CODE_WIDTH}d}"


class ClientObjetSocialInline(admin.TabularInline):
    model = ClientObjetSocial
    extra = 1
    fields = ("nomination", "agrement", "created_at")
    readonly_fields = ("created_at",)
    ordering = ("id",)


@admin.register(Client)
class ClientAdmin(admin.ModelAdmin):
    list_display = (
        "id",
        "code",
        "raison_sociale",
        "type_personne",
        "forme_juridique",
        "statut",
        "pays",
        "ville",
        "assujetti_tva",
        "domicilie_sms",
        "is_active",
        "created_at",
    )
    list_filter = (
        "type_personne",
        "forme_juridique",
        "statut",
        "pays",
        "assujetti_tva",
        "domicilie_sms",
        "is_active",
        ("created_at", admin.DateFieldListFilter),
    )
    search_fields = (
        "^code",
        "raison_sociale__icontains",
        "denomination_commerciale__icontains",
        "matricule_fiscal__icontains",
        "identifiant_unique__icontains",
        "ville__icontains",
        "adresse__icontains",
    )
    ordering = ("id",)
    date_hierarchy = "created_at"
    list_per_page = 50

    readonly_fields = ("code", "created_at", "updated_at")

    fieldsets = (
        ("Identification", {
            "fields": ("code", "raison_sociale", "denomination_commerciale", "type_personne", "forme_juridique", "statut", "is_active")
        }),
        ("Coordonnées", {
            "fields": ("pays", "ville", "code_postal", "adresse")
        }),
        ("Fiscale", {
            "fields": ("assujetti_tva", "domicilie_sms", "matricule_fiscal", "identifiant_unique")
        }),
        ("Capital", {
            "fields": ("capital_social", "valeur_nominale", "nombre_part")
        }),
        ("Meta", {
            "fields": ("created_at", "updated_at")
        }),
    )

    inlines = (ClientObjetSocialInline,)

    actions = ("export_csv",)

    def save_model(self, request, obj, form, change):
        """
        - On add: auto-generate a unique code if blank.
        - On change: make sure code stays immutable.
        """
        if change and obj.pk:
            try:
                original = Client.objects.only("code").get(pk=obj.pk)
                obj.code = original.code
            except Client.DoesNotExist:
                pass

        if not change and not obj.code:
            for _ in range(5):
                obj.code = _next_client_code()
                try:
                    with transaction.atomic():
                        super().save_model(request, obj, form, change)
                    return
                except IntegrityError:
                    obj.code = ""
            raise IntegrityError("Impossible de générer un code unique pour ce client.")
        else:
            super().save_model(request, obj, form, change)

    def export_csv(self, request, queryset):
        """
        Admin action: export selected clients as CSV (UTF-8 BOM + CRLF).
        """
        fields = [
            "code",
            "raison_sociale",
            "type_personne",
            "statut",
            "forme_juridique",
            "pays",
            "ville",
            "assujetti_tva",
            "domicilie_sms",
            "capital_social",
            "valeur_nominale",
            "nombre_part",
            "created_at",
        ]
        resp = HttpResponse(content_type="text/csv; charset=utf-8")
        resp["Content-Disposition"] = 'attachment; filename="clients-selected.csv"'
        resp.write("\ufeff")  # BOM for Excel
        writer = csv.writer(resp)  # default lineterminator = \r\n
        writer.writerow(fields)
        for c in queryset:
            row = []
            for f in fields:
                v = getattr(c, f)
                if isinstance(v, bool):
                    v = "1" if v else "0"
                row.append(v)
            writer.writerow(row)
        return resp
    export_csv.short_description = "Exporter la sélection en CSV"


@admin.register(SocialObject)
class SocialObjectAdmin(admin.ModelAdmin):
    # SocialObject does NOT have created_at — keep it simple:
    list_display = ("id", "nomination", "agrement")
    list_filter = ("agrement",)
    search_fields = ("nomination__icontains",)
    ordering = ("id",)
    # no readonly_fields here (no created_at on this model)


@admin.register(ClientObjetSocial)
class ClientObjetSocialAdmin(admin.ModelAdmin):
    list_display = ("id", "client", "nomination", "agrement", "created_at")
    list_filter = ("agrement",)
    search_fields = ("nomination__icontains", "client__code", "client__raison_sociale")
    raw_id_fields = ("client",)
    ordering = ("id",)
    readonly_fields = ("created_at",)


@admin.register(Associe)
class AssocieAdmin(admin.ModelAdmin):
    list_display = ("id", "client", "type", "civilite", "nom", "prenom", "nombre_parts", "fonctionnaire_public")
    list_filter = ("type", "age_legal", "civilite", "fonctionnaire_public")
    search_fields = ("nom", "prenom", "doc_numero", "email", "gsm")
