from rest_framework import viewsets, generics, permissions, permissions, permissions, permissions, generics
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
try:
    import pycountry
except Exception:
    pycountry = None

from .models import Client, ClientObjetSocial, SocialObject
from .serializers import (
    ClientSerializer,
    ClientObjetSocialSerializer,
    SocialObjectSerializer,
)

# --- Clients ---
class ClientViewSet(viewsets.ModelViewSet):
    queryset = Client.objects.all().order_by("id")
    serializer_class = ClientSerializer

    def get_queryset(self):
        qs = super().get_queryset()
        q = (self.request.query_params.get("q") or self.request.query_params.get("search") or "").strip()
        if q:
            from django.db.models import Q
            qs = qs.filter(
                Q(code__icontains=q) |
                Q(raison_sociale__icontains=q) |
                Q(denomination_commerciale__icontains=q) |
                Q(matricule_fiscal__icontains=q) |
                Q(identifiant_unique__icontains=q)
            )
        return qs

    permission_classes = [permissions.AllowAny]  # DEV only; tighten later

@api_view(["GET"])
@permission_classes([permissions.AllowAny])
def client_choices(request):
    person_types = [["PP","Personne Physique"],["PM","Personne Morale"],["AS","Association"]]
    statuts = [
        ["NOUVELLE CREATION","Nouvelle création"],
        ["EXISTANTE NON EXERCANTE","Existante non exerçante"],
        ["EXERCANTE","Exerçante"],
    ]
    formes_juridiques = [["SUARL","SUARL"],["SURAL","SURAL"],["SARL","SARL"],["SA","SA"],["PP","PP"],["ASSOCIATION","ASSOCIATION"]]
    countries = (
        [{"code": getattr(c, "alpha_2", ""), "name": getattr(c, "name", "")} for c in getattr(pycountry, "countries", [])]
        if pycountry and getattr(pycountry, "countries", None)
        else [{"code":"TN","name":"Tunisia"},{"code":"FR","name":"France"},{"code":"IT","name":"Italy"}]
    )
    return Response({
        "person_types": person_types,
        "statuts": statuts,
        "formes_juridiques": formes_juridiques,
        "countries": countries
    })

class SocialObjectViewSet(viewsets.ModelViewSet):
    queryset = SocialObject.objects.all().order_by("id")
    serializer_class = SocialObjectSerializer
    permission_classes = [permissions.AllowAny]

# --- Client <-> Objet social assignment ---
class ClientObjetSocialListCreate(generics.ListCreateAPIView):
    permission_classes = [permissions.AllowAny]
    serializer_class = ClientObjetSocialSerializer

    def get_queryset(self):
        client_id = self.kwargs.get("client_id")
        from .models import ClientObjetSocial
        return ClientObjetSocial.objects.filter(client_id=client_id).order_by("id")

    def perform_create(self, serializer):
        serializer.save(client_id=self.kwargs.get("client_id"))

class ClientObjetSocialDestroy(generics.DestroyAPIView):
    permission_classes = [permissions.AllowAny]
    serializer_class = ClientObjetSocialSerializer

    def get_queryset(self):
        client_id = self.kwargs.get("client_id")
        from .models import ClientObjetSocial
        return ClientObjetSocial.objects.filter(client_id=client_id)
