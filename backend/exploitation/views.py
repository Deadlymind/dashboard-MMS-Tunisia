from rest_framework import viewsets, permissions
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from django.db.models import Q
from .models import Client
from .models import SocialObject, PERSON_TYPES, FORMES_JURIDIQUES, STATUTS
from .serializers import ClientSerializer
from .serializers import SocialObjectSerializer
import pycountry

class ClientViewSet(viewsets.ModelViewSet):
    serializer_class = ClientSerializer
    permission_classes = [permissions.AllowAny]
    def get_queryset(self):
        qs = Client.objects.all().order_by('id')
        q = self.request.query_params.get("q")
        if q:
            qs = qs.filter(Q(code__icontains=q) | Q(raison_sociale__icontains=q) | Q(denomination_commerciale__icontains=q))
        return qs

@api_view(["GET"])
@permission_classes([permissions.AllowAny])
def client_choices(_request):
    countries = sorted([(c.alpha_2, getattr(c, "name", "")) for c in pycountry.countries], key=lambda x: x[1])
    return Response({
        "person_types": list(PERSON_TYPES),
        "formes_juridiques": list(FORMES_JURIDIQUES),
        "statuts": list(STATUTS),
        "countries": countries,
    })

from rest_framework import generics
from .models import Client
from .models import SocialObject
from .serializers import ClientObjetSocialSerializer


from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status, viewsets, permissions
from django.shortcuts import get_object_or_404
from .models import Client, ClientObjetSocial, SocialObject
from .serializers import ClientSerializer, ClientObjetSocialSerializer, SocialObjectSerializer

class ClientObjetSocialListCreate(APIView):
    permission_classes = [permissions.AllowAny]

    def get(self, request, client_id):
        try:
            qs = ClientObjetSocial.objects.filter(client_id=client_id).order_by('id')
            data = ClientObjetSocialSerializer(qs, many=True).data
            return Response(data, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({"detail": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def post(self, request, client_id):
        try:
            payload = request.data or {}
            client = get_object_or_404(Client, pk=client_id)
            obj = ClientObjetSocial(
                client=client,
                nomination=(payload.get("nomination") or "").strip(),
                agrement=bool(payload.get("agrement")),
            )
            obj.save()
            return Response(ClientObjetSocialSerializer(obj).data, status=status.HTTP_201_CREATED)
        except Exception as e:
            return Response({"detail": str(e)}, status=status.HTTP_400_BAD_REQUEST)

class ClientObjetSocialDestroy(APIView):
    permission_classes = [permissions.AllowAny]
    def delete(self, request, client_id, pk):
        obj = get_object_or_404(ClientObjetSocial, pk=pk, client_id=client_id)
        obj.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

class SocialObjectViewSet(viewsets.ModelViewSet):
    queryset = SocialObject.objects.all().order_by("nomination")
    serializer_class = SocialObjectSerializer
    permission_classes = [permissions.AllowAny]

    queryset = SocialObject.objects.all().order_by('nomination')
    serializer_class = SocialObjectSerializer
    permission_classes = [permissions.AllowAny]  # dev only
