from rest_framework import viewsets, permissions
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from django.db.models import Q
from .models import Client
from .models import SocialObject, PERSON_TYPES, FORMES_JURIDIQUES, STATUTS
from .serializers import ClientSerializer
from .serializers import SocialObjectSerializer
import pycountry

class ClientViewSet(viewsets.ModelViewSet):
    serializer_class = ClientSerializer
    permission_classes = [permissions.AllowAny]
    def get_queryset(self):
        qs = Client.objects.all().order_by("code")
        q = self.request.query_params.get("q")
        if q:
            qs = qs.filter(Q(code__icontains=q) | Q(raison_sociale__icontains=q) | Q(denomination_commerciale__icontains=q))
        return qs

@api_view(["GET"])
@permission_classes([permissions.AllowAny])
def client_choices(_request):
    countries = sorted([(c.alpha_2, getattr(c, "name", "")) for c in pycountry.countries], key=lambda x: x[1])
    return Response({
        "person_types": list(PERSON_TYPES),
        "formes_juridiques": list(FORMES_JURIDIQUES),
        "statuts": list(STATUTS),
        "countries": countries,
    })

from rest_framework import generics
from .models import Client
from .models import SocialObject
from .serializers import ClientObjetSocialSerializer

class ClientObjetSocialListCreate(generics.ListCreateAPIView):
    serializer_class = ClientObjetSocialSerializer
    permission_classes = [permissions.AllowAny]  # dev
    def get_queryset(self):
        return ClientObjetSocial.objects.filter(client_id=self.kwargs["client_id"]).order_by("id")
    def perform_create(self, serializer):
        serializer.save(client_id=self.kwargs["client_id"])

class ClientObjetSocialDestroy(generics.DestroyAPIView):
    serializer_class = ClientObjetSocialSerializer
    permission_classes = [permissions.AllowAny]  # dev
    def get_queryset(self):
        return ClientObjetSocial.objects.filter(client_id=self.kwargs["client_id"])

# AUTO: override client_choices with full choices + ISO countries
@api_view(["GET"])
@permission_classes([permissions.AllowAny])
def client_choices(_request):
    from .models import PERSON_TYPES, FORMES_JURIDIQUES, STATUTS
    countries = sorted([(c.alpha_2, getattr(c, "name", "")) for c in pycountry.countries], key=lambda x: x[1])
    return Response({
        "person_types": list(PERSON_TYPES),
        "formes_juridiques": list(FORMES_JURIDIQUES),
        "statuts": list(STATUTS),
        "countries": countries,
    })

# --- AUTO OVERRIDE: choices endpoint ---
@api_view(["GET"])
@permission_classes([permissions.AllowAny])
def client_choices(_request):
    from .models import PERSON_TYPES, FORMES_JURIDIQUES, STATUTS
    countries = sorted([(c.alpha_2, getattr(c, "name", "")) for c in pycountry.countries], key=lambda x: x[1])
    return Response({
        "person_types": list(PERSON_TYPES),           # [("PM","Personne Morale"),("PP","Personne Physique"),("ASSO","Association")]
        "formes_juridiques": list(FORMES_JURIDIQUES), # e.g., SARL, SUARL, SA, SAS, PP
        "statuts": list(STATUTS),                     # [("NOUVELLE_CREATION","Nouvelle création"),("EXISTANTE_NON_EXERCANTE","Existante non exerçante"),("EXERCANTE","Exerçante")]
        "countries": countries,                       # full ISO-3166 list
    })


class SocialObjectViewSet(viewsets.ModelViewSet):
    queryset = SocialObject.objects.all().order_by('nomination')
    serializer_class = SocialObjectSerializer
    permission_classes = [permissions.AllowAny]  # dev only
