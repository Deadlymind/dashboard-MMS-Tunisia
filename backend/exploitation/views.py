from rest_framework import viewsets, permissions
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from django.db.models import Q
from .models import Client, PERSON_TYPES, FORMES_JURIDIQUES, STATUTS
from .serializers import ClientSerializer

class ClientViewSet(viewsets.ModelViewSet):
    serializer_class = ClientSerializer
    permission_classes = [permissions.AllowAny]
    def get_queryset(self):
        qs = Client.objects.all().order_by("code")
        q = self.request.query_params.get("q")
        if q:
            qs = qs.filter(Q(code__icontains=q) | Q(raison_sociale__icontains=q) | Q(denomination_commerciale__icontains=q))
        return qs

@api_view(["GET"])
@permission_classes([permissions.AllowAny])
def client_choices(_request):
    return Response({
        "person_types": PERSON_TYPES,
        "formes_juridiques": FORMES_JURIDIQUES,
        "statuts": STATUTS,
        "countries": [("TN","Tunisie"),("FR","France"),("DZ","Alg√©rie"),("MA","Maroc")]  # minimal sample; extend later
    })

from rest_framework import generics
from .models import ClientObjetSocial
from .serializers import ClientObjetSocialSerializer

class ClientObjetSocialListCreate(generics.ListCreateAPIView):
    serializer_class = ClientObjetSocialSerializer
    permission_classes = [permissions.AllowAny]  # dev
    def get_queryset(self):
        return ClientObjetSocial.objects.filter(client_id=self.kwargs["client_id"]).order_by("id")
    def perform_create(self, serializer):
        serializer.save(client_id=self.kwargs["client_id"])

class ClientObjetSocialDestroy(generics.DestroyAPIView):
    serializer_class = ClientObjetSocialSerializer
    permission_classes = [permissions.AllowAny]  # dev
    def get_queryset(self):
        return ClientObjetSocial.objects.filter(client_id=self.kwargs["client_id"])
