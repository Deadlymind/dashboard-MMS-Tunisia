from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator


PERSON_TYPES = [("PM","Personne Morale"),("PP","Personne Physique"),("ASSO","Association")]
FORMES_JURIDIQUES = [("SUARL","SUARL"),("SARL","SARL"),("SA","SA"),("PP","PP"),("ASSOCIATION","ASSOCIATION")]
STATUTS = [("NOUVELLE_CREATION","Nouvelle création"),("EXISTANTE_NON_EXERCANTE","Existante non exerçante"),("EXERCANTE","Exerçante")]

class Client(models.Model):
    code = models.CharField(max_length=16, unique=True)
    raison_sociale = models.CharField(max_length=255)
    denomination_commerciale = models.CharField(max_length=255, blank=True)   # Nomination commerciale
    type_personne = models.CharField(max_length=5, choices=PERSON_TYPES, default="PM")
    forme_juridique = models.CharField(max_length=12, choices=FORMES_JURIDIQUES, blank=True)
    statut = models.CharField(max_length=32, choices=STATUTS, default="EXERCANTE")
    assujetti_tva = models.BooleanField(default=True)
    domicilie_sms = models.BooleanField(default=False)
    matricule_fiscal = models.CharField(max_length=64, blank=True)
    identifiant_unique = models.CharField(max_length=64, blank=True)
    code_postal = models.CharField(max_length=10, blank=True)
    adresse = models.CharField(max_length=255, blank=True)
    ville = models.CharField(max_length=100, blank=True)
    pays = models.CharField(max_length=2, blank=True, default="TN")
    capital_social = models.DecimalField(max_digits=12, decimal_places=3, default=0)
    valeur_nominale = models.DecimalField(max_digits=12, decimal_places=3, default=0)
    nombre_part = models.IntegerField(default=0, blank=True)
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["code"]

    def __str__(self) -> str:
        return f"{self.code} - {self.raison_sociale}"

class ClientObjetSocial(models.Model):
    client = models.ForeignKey(Client, on_delete=models.CASCADE, related_name="objets_sociaux")
    nomination = models.CharField(max_length=255)
    agrement = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    class Meta: ordering = ["id"]



class SocialObject(models.Model):
    nomination = models.CharField(max_length=255, unique=True)
    agrement = models.BooleanField(default=False)

    def __str__(self):
        return self.nomination


# --- Associés / Actionnaires ---

class Associe(models.Model):
    TYPE_CHOICES = [
        ("PARTICULIER", "particulier"),
        ("SOCIETE", "société"),
    ]
    AGE_LEGAL_CHOICES = [
        ("MAJEUR", "Associé Majeur"),
        ("MINEUR", "Associé Mineur"),
    ]
    CIVILITE_CHOICES = [
        ("MR", "Mr."),
        ("MLLE", "Mlle"),
        ("MME", "Mme"),
    ]
    DOC_TYPE_CHOICES = [
        ("CIN", "CIN"),
        ("PASSEPORT", "Passport (non résident)"),
    ]

    client = models.ForeignKey(Client, on_delete=models.CASCADE, related_name="associes")

    # Identité
    type = models.CharField(max_length=20, choices=TYPE_CHOICES, default="PARTICULIER")
    age_legal = models.CharField(max_length=10, choices=AGE_LEGAL_CHOICES, default="MAJEUR")
    civilite = models.CharField(max_length=10, choices=CIVILITE_CHOICES, default="MR")
    prenom = models.CharField(max_length=150, blank=True, default="")
    nom = models.CharField(max_length=150, blank=True, default="")
    nationalite = models.CharField(max_length=2, blank=True, default="")  # ISO alpha-2 si possible

    date_naissance = models.DateField(null=True, blank=True)
    lieu_naissance = models.CharField(max_length=200, blank=True, default="")

    # Document
    doc_type = models.CharField(max_length=15, choices=DOC_TYPE_CHOICES, default="CIN")
    doc_numero = models.CharField(max_length=64, blank=True, default="")
    doc_date = models.DateField(null=True, blank=True)
    doc_delivre_a = models.CharField(max_length=200, blank=True, default="")

    # Coordonnées
    code_postal = models.CharField(max_length=20, blank=True, default="")
    ville = models.CharField(max_length=120, blank=True, default="")
    pays = models.CharField(max_length=2, blank=True, default="TN")
    gsm = models.CharField(max_length=50, blank=True, default="")
    email = models.EmailField(blank=True, default="")

    # Participation
    nombre_parts = models.IntegerField(default=0, validators=[MinValueValidator(0), MaxValueValidator(100)])
    fonctionnaire_public = models.BooleanField(default=False)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ["id"]

    def __str__(self):
        full = (self.prenom + " " + self.nom).strip() or "Associé"
        return f"{full} ({self.get_type_display()})"
